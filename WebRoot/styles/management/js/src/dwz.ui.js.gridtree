function initEnv() {
	$("body").append(DWZ.frag["dwzFrag"]);

	if ($.browser.msie && /6.0/.test(navigator.userAgent)) {
		try {
			document.execCommand("BackgroundImageCache", false, true);
		} catch (e) {
		}
	}
	// 清理浏览器内存,只对IE起效
	if ($.browser.msie) {
		window.setInterval("CollectGarbage();", 10000);
	}

	$(window).resize(function() {
				initLayout();
				$(this).trigger("resizeGrid");
			});

	var ajaxbg = $("#background,#progressBar");
	ajaxbg.hide();
	// 如果不是表格树的页面,就在ajax提交的时候使用默认的提交页面. lsq
	$(document).ajaxStart(function() {
				 ajaxbg.show();
			}).ajaxStop(function() {
				 ajaxbg.hide();
			});
	$("#leftside").jBar({
				minW : 150,
				maxW : 700
			});

	if ($.taskBar)
		$.taskBar.init();
	navTab.init();
	if ($.fn.switchEnv)
		$("#switchEnvBox").switchEnv();
	if ($.fn.navMenu)
		$("#navMenu").navMenu();
	 
	setTimeout(function() {
				initLayout();
				initUI();

				// navTab styles
				var jTabsPH = $("div.tabsPageHeader");
				jTabsPH.find(".tabsLeft").hoverClass("tabsLeftHover");
				jTabsPH.find(".tabsRight").hoverClass("tabsRightHover");
				jTabsPH.find(".tabsMore").hoverClass("tabsMoreHover");

			}, 10);

}
  
function initLayout() {
	var iContentW = $(window).width()
			- (DWZ.ui.sbar ? $("#sidebar").width() + 10 : 34) - 5;
	var iContentH = $(window).height() - $("#header").height() - 34;

	$("#container").width(iContentW);
	$("#container .tabsPageContent").height(iContentH - 34).find("[layoutH]")
			.layoutH();
	$("#sidebar, #sidebar_s .collapse, #splitBar, #splitBarProxy")
			.height(iContentH - 5);
	$("#taskbar").css({
				top : iContentH + $("#header").height() + 5,
				width : $(window).width()
			});
	var gridTreeHeight = $("#container .tabsPageContent").height() - $('#container div.pageHeader').height()-64;  
	$('#newtableTree').resetHeight(gridTreeHeight);   
	$('#newtableTree2').resetHeight(gridTreeHeight);   
} 

function initUI(_box) {
	var $p = $(_box || document);

	// tables
	$("table.table", $p).jTable();

	// css tables
	$('table.list', $p).cssTable();   
	//下面对表格树进行处理.
	if ($('#newtableTree', $p).size()>0) {  
		//计算得到表格树的高度..不采用设置的高度!!
		var gridTreeHeight = $("#container .tabsPageContent").height() - $('#container div.pageHeader').height()-64;    
		var GridColumnType = [{
				header : '主键',
				headerIndex : 'taskid', 
				width : 150
			}, {
				header : '所属项目',
				headerIndex : 'projname',
				width : 100 
			}, {
				header : '部门',
				headerIndex : 'department',
				width : 100,
				columntype : {
						inputtype : 'function',
						func:function(t){
							t = t.department;
							t = t+t+t+t+t+t+t+t+t+t+t+t+t+t+t+t;
							if(t.length>2){
								return t.substring(0,6)+'...';
							}
							else return t;//text-overflow:ellipsis
						}
					}
			},  /*{
				header : '时间管理',
				headerIndex : 'taskid',
				width : 100
			},*/{
				header : '责任人',
				headerIndex : 'encharge',
				width : 100
			}, {
				header : '关键焦点',
				headerIndex : 'disparentId',
				width : 100
			}, {
				header : '完成标志',
				headerIndex : 'taskkeyword',
				width : 100
			}, {
				header : '计划开始',
				headerIndex : 'palnstart',
				width : 100
			}, {
				header : '计划完成',
				headerIndex : 'planend',
				width : 300
			}, {
				header : '工时估算',
				headerIndex : 'attention',
				width : 300
			}, {
				header : '费用估算',
				headerIndex : 'subjoincost',
				width : 300
			} ]; 
		var content = {
			columnModel : GridColumnType,
			dataUrl : appPath + "/gridtree/gridTree!initGridTree.do",
			lazyLoadUrl : appPath + "/gridtree/gridTree!lazyLoad.do",
			idColumn : 'taskid',//id所在的列,一般是主键(不一定要显示出来)
			parentColumn : 'parenttid', //父亲列id
			closeImg : appPath+'/styles/gridtree/demo/images/minus.gif',//父级节点的关闭图标
			openImg : appPath+'/styles/gridtree/demo/images/plus.gif',//父级节点的打开图标
			lazyLoadImg : appPath+'/styles/gridtree/demo/images/plus2.gif',//懒加载时显示的图标
			blankImg : appPath+'/styles/gridtree/demo/images/blank.gif',//空白节点
			noparentImg : appPath+'/styles/gridtree/demo/images/tv-item.gif',//树叶节点的图标
			lastLeafImg : appPath+'/styles/gridtree/demo/images/tv-item-last.gif',//一层里面最后一个树叶节点的图标
			morePageImg : appPath+'/styles/gridtree/demo/images/morePage.gif',//多层次分页的图标  added on 20101212 
			pageSize : 2,
			height:gridTreeHeight+'px',
			pageBar : true,  
			toolBar:[{name:"查询",cls:"delete",clk:function(){
				var str = $("#gtForm").serialize();  
				$('#newtableTree',$p).search({
					url : appPath + "/gridtree/gridTree!initGridTree.do",
					param : str
				});
				return false;
			}}], 
			rowCount:true,
			tableId : 'testTable',//表格树的id
			checkOption : 'multi',  
			exchangeColor : false,  
			debug:true,
			onError:function(msg){
				alertMsg.error(msg);
			},  
			beforeAjax:function(){},
			afterAjax:function(){},
			lazy : true,//使用懒加载模式 
			leafColumn : 'isLeaf',//用于判断节点是不是树叶 
			el : 'newtableTree' //要进行渲染的div id   
		};   
		$('#newtableTree',$p).gridTree(content);  
	}  
 
	$("div.tabs", $p).each(function() {
				var $this = $(this);
				var options = {};
				options.currentIndex = $this.attr("currentIndex") || 0;
				options.eventType = $this.attr("eventType") || "click";
				$this.tabs(options);
			});
	$("ul.tree", $p).jTree();
	$('div.accordion', $p).each(function() {
				var $this = $(this);
				$this.accordion({
							fillSpace : $this.attr("fillSpace"),
							alwaysOpen : true,
							active : 0
						});
			});
	

	$(":button.checkboxCtrl, :checkbox.checkboxCtrl", $p).checkboxCtrl($p);

	if ($.fn.combox) {
		$("select.combox", $p).combox();
		$('.select a').width(100);// 修改下拉菜单的默认宽度为100 lsq
	}

	if ($.fn.xheditor) {
		$("textarea.editor", $p).each(function() {
			var $this = $(this);
			var op = {
				html5Upload : false,
				skin : 'vista',
				tools : $this.attr("tools") || 'full'
			};
			var upAttrs = [["upLinkUrl", "upLinkExt", "zip,rar,txt"],
					["upImgUrl", "upImgExt", "jpg,jpeg,gif,png"],
					["upFlashUrl", "upFlashExt", "swf"],
					["upMediaUrl", "upMediaExt", "avi"]];

			$(upAttrs).each(function(i) {
						var urlAttr = upAttrs[i][0];
						var extAttr = upAttrs[i][1];

						if ($this.attr(urlAttr)) {
							op[urlAttr] = $this.attr(urlAttr);
							op[extAttr] = $this.attr(extAttr) || upAttrs[i][2];
						}
					});

			$this.xheditor(op);
		});
	}

	if ($.fn.uploadify) {
		$(":file[uploader]", $p).each(function() {
			var $this = $(this);
			var options = {
				uploader : $this.attr("uploader"),
				script : $this.attr("script"),
				cancelImg : $this.attr("cancelImg"),
				queueID : $this.attr("fileQueue") || "fileQueue",
				fileDesc : $this.attr("fileDesc")
						|| "*.jpg;*.jpeg;*.gif;*.png;*.pdf",
				fileExt : $this.attr("fileExt")
						|| "*.jpg;*.jpeg;*.gif;*.png;*.pdf",
				folder : $this.attr("folder"),
				auto : true,
				multi : true,
				onError : uploadifyError,
				onComplete : uploadifyComplete,
				onAllComplete : uploadifyAllComplete
			};
			if ($this.attr("onComplete")) {
				options.onComplete = DWZ.jsonEval($this.attr("onComplete"));
			}
			if ($this.attr("onAllComplete")) {
				options.onAllComplete = DWZ.jsonEval($this
						.attr("onAllComplete"));
			}
			if ($this.attr("scriptData")) {
				options.scriptData = DWZ.jsonEval($this.attr("scriptData"));
			}
			$this.uploadify(options);
		});
	}

	// init styles
	$("input[type=text], input[type=password], textarea", $p)
			.addClass("textInput").focusClass("focus");

	$("input[readonly], textarea[readonly]", $p).addClass("readonly");
	$("input[disabled=true], textarea[disabled=true]", $p).addClass("disabled");

	$("input[type=text]", $p).not("div.tabs input[type=text]", $p)
			.filter("[alt]").inputAlert();

	// Grid ToolBar
	$("div.panelBar li, div.panelBar", $p).hoverClass("hover");

	// Button
	$("div.button", $p).hoverClass("buttonHover");
	$("div.buttonActive", $p).hoverClass("buttonActiveHover");

	// tabsPageHeader
	$(
			"div.tabsHeader li, div.tabsPageHeader li, div.accordionHeader, div.accordion",
			$p).hoverClass("hover");

	$("div.panel", $p).jPanel();

	// validate form
	$("form.required-validate", $p).each(function() {
		$(this).validate({
					focusInvalid : false,
					focusCleanup : true,
					errorElement : "span",
					ignore : ".ignore",
					invalidHandler : function(form, validator) {
						var errors = validator.numberOfInvalids();
						if (errors) {
							var message = DWZ
									.msg("validateFormError", [errors]);
							alertMsg.error(message);
						}
					}
				});
	});

	if ($.fn.datepicker) {
		$('input.date', $p).each(function() {
					var $this = $(this);
					var opts = {};
					if ($this.attr("format"))
						opts.pattern = $this.attr("format");
					if ($this.attr("yearstart"))
						opts.yearstart = $this.attr("yearstart");
					if ($this.attr("yearend"))
						opts.yearend = $this.attr("yearend");
					$this.datepicker(opts);
				});
	}

	// navTab
	$("a[target=navTab]", $p).each(function() {
		$(this).click(function(event) {
			var $this = $(this);
			var title = $this.attr("title") || $this.text();
			var tabid = $this.attr("rel") || "_blank";
			var fresh = eval($this.attr("fresh") || "true");
			var external = eval($this.attr("external") || "false");
			var url = unescape($this.attr("href")).replaceTmById($p);
			DWZ.debug(url);
			if (!url.isFinishedTm()) {
				alertMsg.error($this.attr("warn") || DWZ.msg("alertSelectMsg"));
				return false;
			}
			navTab.openTab(tabid, url, {
						title : title,
						fresh : fresh,
						external : external
					});

			event.preventDefault();
		});
	});

	// dwz.ajax.js
	if ($.fn.ajaxTodo)
		$("a[target=ajaxTodo]", $p).ajaxTodo($p);
	if ($.fn.dwzExport)
		$("a[target=dwzExport]", $p).dwzExport($p);

	// dialogs
	$("a[target=dialog]", $p).each(function() {
		$(this).click(function(event) {
			var $this = $(this);
			var title = $this.attr("title") || $this.text();
			var rel = $this.attr("rel") || "_blank";
			var options = {};
			var w = $this.attr("width");
			var h = $this.attr("height");
			if (w)
				options.width = w;
			if (h)
				options.height = h;
			options.max = eval($this.attr("max") || "false");
			options.mask = eval($this.attr("mask") || "false");
			options.maxable = eval($this.attr("maxable") || "true");
			options.minable = eval($this.attr("minable") || "true");
			options.fresh = eval($this.attr("fresh") || "true");
			options.resizable = eval($this.attr("resizable") || "true");
			options.drawable = eval($this.attr("drawable") || "true");
			options.close = eval($this.attr("close") || "");
			options.param = $this.attr("param") || "";

			var url = unescape($this.attr("href")).replaceTmById($p);
			DWZ.debug(url);
			if (!url.isFinishedTm()) {
				alertMsg.error($this.attr("warn") || DWZ.msg("alertSelectMsg"));
				return false;
			}
			$.pdialog.open(url, rel, title, options);

			return false;
		});
	});
	$("a[target=ajax]", $p).each(function() {
				$(this).click(function(event) {
							var $this = $(this);
							var rel = $this.attr("rel");
							if (rel) {
								var $rel = $("#" + rel);
								$rel.loadUrl($this.attr("href"), {},
										function() {
											$rel.find("[layoutH]").layoutH();
										});
							}

							event.preventDefault();
						});
			});

	$("div.pagination", $p).each(function() {
				var $this = $(this);
				$this.pagination({
							targetType : $this.attr("targetType"),
							rel : $this.attr("rel"),
							totalCount : $this.attr("totalCount"),
							numPerPage : $this.attr("numPerPage"),
							pageNumShown : $this.attr("pageNumShown"),
							currentPage : $this.attr("currentPage")
						});
			});

	if ($.fn.lookup)
		$("a[lookupName]", $p).lookup();
	if ($.fn.suggest)
		$("input[suggestFields]", $p).suggest();
	if ($.fn.itemDetail)
		$("table[itemDetail]", $p).itemDetail();
	if ($.fn.selectedTodo)
		$("a[target=selectedTodo]", $p).selectedTodo();
	if ($.fn.pagerForm)
		$("form[rel=pagerForm]", $p).pagerForm({
					parentBox : $p
				});
}
